<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Customer Management with Delete</title>
<style>
  body {
    font-family: Arial, sans-serif;
    margin: 2rem;
    background: #f9fafb;
    color: #111827;
  }
  h1 {
    margin-bottom: 0.5rem;
  }
  .container {
    max-width: 900px;
    margin: 0 auto;
  }
  table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 1rem;
    background: white;
    box-shadow: 0 0 5px rgba(0,0,0,0.1);
  }
  th, td {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid #e5e7eb;
    text-align: left;
  }
  th {
    background-color: #f3f4f6;
  }
  button {
    cursor: pointer;
    padding: 0.3rem 0.7rem;
    border: none;
    background-color: #3b82f6;
    color: white;
    border-radius: 4px;
    margin-right: 0.3rem;
  }
  button:hover {
    background-color: #2563eb;
  }
  button.deleteBtn {
    background-color: #ef4444;
  }
  button.deleteBtn:hover {
    background-color: #b91c1c;
  }
  input[type="text"], input[type="email"], textarea {
    width: 100%;
    padding: 0.4rem;
    margin: 0.3rem 0 1rem 0;
    box-sizing: border-box;
  }
  label {
    font-weight: bold;
  }
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0,0,0,0.3);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  .modal {
    background: white;
    padding: 1.5rem 2rem;
    border-radius: 8px;
    width: 400px;
    max-width: 95%;
    box-shadow: 0 2px 10px rgba(0,0,0,0.2);
  }
  .modal-header {
    margin-bottom: 1rem;
  }
  .modal-header h2 {
    margin: 0;
  }
  .actions {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
  }
  .hidden {
    display: none;
  }
  #searchInput {
    width: 300px;
    padding: 0.4rem;
    margin-bottom: 1rem;
    border-radius: 4px;
    border: 1px solid #d1d5db;
  }
</style>
</head>
<body>

<div class="container">
  <h1>Customer Management</h1>
  <input type="text" id="searchInput" placeholder="Search by name, email, company, or phone..." />

  <button id="addCustomerBtn">Add Customer</button>

  <table>
    <thead>
      <tr>
        <th>Name</th><th>Email</th><th>Phone</th><th>Company</th><th>Notes</th><th>Actions</th>
      </tr>
    </thead>
    <tbody id="customerBody">
      <!-- Customer rows go here -->
    </tbody>
  </table>
</div>

<!-- Modal for Add/Edit -->
<div id="customerDialog" class="modal-overlay hidden" role="dialog" aria-modal="true" aria-labelledby="dialogTitle">
  <div class="modal">
    <div class="modal-header">
      <h2 id="dialogTitle">Add New Customer</h2>
    </div>
    <form id="customerForm">
      <input type="hidden" id="customerId" />
      <label for="name">Name</label>
      <input type="text" id="name" required />

      <label for="email">Email</label>
      <input type="email" id="email" required />

      <label for="phone">Phone</label>
      <input type="text" id="phone" />

      <label for="company">Company</label>
      <input type="text" id="company" />

      <label for="notes">Notes</label>
      <textarea id="notes" rows="3"></textarea>

      <div class="actions">
        <button type="submit">Save</button>
        <button type="button" id="cancelBtn">Cancel</button>
      </div>
    </form>
  </div>
</div>

<script>
  // Load or init customers from localStorage
  let customers = JSON.parse(localStorage.getItem('customers') || '[]');

  const customerBody = document.getElementById('customerBody');
  const searchInput = document.getElementById('searchInput');
  const addCustomerBtn = document.getElementById('addCustomerBtn');
  const dialog = document.getElementById('customerDialog');
  const form = document.getElementById('customerForm');
  const cancelBtn = document.getElementById('cancelBtn');
  const dialogTitle = document.getElementById('dialogTitle');
  const customerIdInput = document.getElementById('customerId');

  // Save customers to localStorage
  function saveToStorage() {
    localStorage.setItem('customers', JSON.stringify(customers));
  }

  // Render customers
  function renderCustomers(list) {
    customerBody.innerHTML = '';
    if (list.length === 0) {
      customerBody.innerHTML = '<tr><td colspan="6" style="text-align:center;color:#666;">No customers found</td></tr>';
      return;
    }
    list.forEach(c => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${c.name}</td>
        <td>${c.email}</td>
        <td>${c.phone || ''}</td>
        <td>${c.company || ''}</td>
        <td>${c.notes || ''}</td>
        <td>
          <button data-id="${c.id}" class="editBtn">Edit</button>
          <button data-id="${c.id}" class="deleteBtn deleteBtn">Delete</button>
        </td>
      `;
      customerBody.appendChild(tr);
    });

    // Attach edit handlers
    document.querySelectorAll('.editBtn').forEach(btn => {
      btn.onclick = () => editCustomer(btn.getAttribute('data-id'));
    });

    // Attach delete handlers
    document.querySelectorAll('.deleteBtn').forEach(btn => {
      btn.onclick = () => deleteCustomer(btn.getAttribute('data-id'));
    });
  }

  // Search filter
  searchInput.addEventListener('input', () => {
    const q = searchInput.value.toLowerCase();
    const filtered = customers.filter(c =>
      c.name.toLowerCase().includes(q) ||
      c.email.toLowerCase().includes(q) ||
      (c.company || '').toLowerCase().includes(q) ||
      (c.phone || '').toLowerCase().includes(q)
    );
    renderCustomers(filtered);
  });

  // Open Add modal
  addCustomerBtn.onclick = () => {
    dialogTitle.textContent = 'Add New Customer';
    form.reset();
    customerIdInput.value = '';
    dialog.classList.remove('hidden');
  };

  // Cancel button closes modal
  cancelBtn.onclick = () => {
    dialog.classList.add('hidden');
  };

  // Save form handler
  form.onsubmit = e => {
    e.preventDefault();

    const newCustomer = {
      id: customerIdInput.value || Date.now().toString(),
      name: form.name.value.trim(),
      email: form.email.value.trim(),
      phone: form.phone.value.trim(),
      company: form.company.value.trim(),
      notes: form.notes.value.trim()
    };

    if (customerIdInput.value) {
      // Update existing
      const idx = customers.findIndex(c => c.id === newCustomer.id);
      if (idx >= 0) {
        customers[idx] = newCustomer;
      }
    } else {
      // Add new customer at the top
      customers.unshift(newCustomer);
    }

    saveToStorage();
    renderCustomers(customers);
    dialog.classList.add('hidden');
  };

  // Edit customer
  function editCustomer(id) {
    const c = customers.find(cust => cust.id === id);
    if (!c) return;

    dialogTitle.textContent = 'Edit Customer';
    customerIdInput.value = c.id;
    form.name.value = c.name;
    form.email.value = c.email;
    form.phone.value = c.phone;
    form.company.value = c.company;
    form.notes.value = c.notes;

    dialog.classList.remove('hidden');
  }

  // Delete customer
  function deleteCustomer(id) {
    if (confirm('Are you sure you want to delete this customer?')) {
      customers = customers.filter(c => c.id !== id);
      saveToStorage();
      renderCustomers(customers);
    }
  }

  // Initial render
  renderCustomers(customers);
</script>

</body>
</html>